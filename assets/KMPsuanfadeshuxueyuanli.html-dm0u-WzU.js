import{_ as n,o as s,c as a,e as p}from"./app-rM-3rrR9.js";const t={},o=p(`<ul><li><p>对于一个有限自动机M，它是一个5元组（S,s₀,A,Σ,δ)，S是有限状态集，s₀是初始状态(x₀∈X)，A是可接受状态集(A⊆X)，∑是有限输入表，δ是状态转移函数(从S×Σ到S的映射)。假定有一个模式串p=&quot;abaabcb&quot;(长度m)，待匹配字符串s=&quot;abaabaabcb&quot;(长度n)，当第5个字符&#39;c&#39;匹配失败时，寻常的做法是将p的索引回退到0，s的索引回退到1，再重新进行匹配。观察s与p得知：p[0...4]==s[0...4]，p[0...1]==p[3...4]==&quot;ab&quot;，当s[5]与p[5]无法匹配时，可以尝试判断s[5]==p[2]是否成立，若成立，由前面的推论可知p[0...1,2]==s[3...4,5]，所以第5个字符匹配失败时，可以将p的索引回退到2继续进行比较，这样就无需变动s的索引，节约了计算时间，所以只要能够为状态机设计出合理的状态转移函数，就能够加速字符串的匹配。</p></li><li><p>更一般化情况下，对于模式串p[0...m-1]，待匹配字符串s[0...n-1]，对任意i∈[0,m-1],j∈[0,n-1]，有：[i,j]=δ(i,p[j]) ( i 为状态机当前状态索引，j 为 s 的索引)。对于δ函数，当循环输入一个字符 p[j] 时有两种结果，即匹配成功和匹配失败。若匹配成功，i 向后移一位，继续与p[j+1]进行比较；若匹配失败，则需要将 i 进行跳转，原因后面会解释，这里令 i 的跳转表为 next[0...m-1]，每次跳转后需重新比较p[i]与s[j]，直到它们相等或者i==0时终止跳转，最后再进行一次比较，若相等则 i 可以向后移一位继续与 s[j+1]比较，伪代码如下：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//状态转移
delta<span class="token punctuation">(</span>p,s,next,i,j<span class="token punctuation">)</span>
	<span class="token keyword">while</span> i<span class="token operator">&gt;</span><span class="token number">0</span> and p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
		<span class="token assign-left variable">i</span><span class="token operator">=</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
		<span class="token assign-left variable">i</span><span class="token operator">=</span>i+1
	<span class="token builtin class-name">return</span> i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//搜索
kmp_search<span class="token punctuation">(</span>p,s,next<span class="token punctuation">)</span>
	<span class="token assign-left variable">m</span><span class="token operator">=</span>p.length
	<span class="token assign-left variable">n</span><span class="token operator">=</span>s.length
	i,j<span class="token operator">=</span><span class="token number">0</span>
	<span class="token keyword">while</span> i<span class="token operator">&lt;</span>m and j<span class="token operator">&lt;</span>n
		<span class="token assign-left variable">i</span><span class="token operator">=</span>delta<span class="token punctuation">(</span>p,s,next,i,j<span class="token punctuation">)</span>
		<span class="token assign-left variable">j</span><span class="token operator">=</span>j+1
	<span class="token keyword">if</span> <span class="token assign-left variable">i</span><span class="token operator">==</span>m
		<span class="token builtin class-name">return</span> j-m
	<span class="token builtin class-name">return</span> <span class="token parameter variable">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>前面的模式串p=&quot;abaabcb&quot;在第5个字符匹配失败时，因为有p[0...4]==s[0...4]，p[0...1]==p[3...4]==ab，所以 i 可以回退到2继续进行匹配，这里的 &quot;ab&quot; 我称为p[0...4]和p<a href="k%E2%88%88(0,5)">k...5</a>的最长公共前缀，其长度记为 π，满足：</li></ul><div class="language-c" data-ext="c"><pre class="language-c"><code>                    π<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">{</span> k <span class="token operator">:</span> p<span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> ∧ k <span class="token operator">&lt;</span> i <span class="token punctuation">}</span>
</code></pre></div><p>由上式可推 π[i+1]=max{k:p[0...k-1]==p[(i+1)-k...(i+1)-1]∧k&lt;(i+1)}，π[0]=0，令 π[i]=x：</p><ol><li>当p[i]==p[x]时，总有 p[0...x-1]p[x]==p[i-x...i-1]p[i]，即p[0...(x+1)-1]==p[(i+1)-(x+1)...(i+1)-1]，可得π[i+1]==x+1==π[i]+1，因此，对任意p[i]==p[π[i]]，满足递推式：π[i+1]==π[i]+1。</li><li>当p[i] !=p[x]时，p[0...x-1]p[x]==p[i-x...i-1]p[i] 显然不成立，那么有没有更短的长度为y(y&lt;x)的公共前缀使 p[0...y-1]p[y]==p[i-y...i-1] 成立呢？这里我同样可以对 p[x] 进行状态转移，令y=π[x]，由于y是x位置的最长公共前缀的长度，所以有 p[0...y-1]==p[x-y...x-1]，又p[0...y-1]是p[0...x-1]的最长前缀，所以p[0...y-1]也是p[i-x...i-1]的最长前缀，因此满足：π[i+1]=π[x]。</li></ol><p>从上面的结论来看，π数组跟next数组是有紧密联系的，它们都完成匹配过程中的状态转移，但是却有些细微的区别，不少博主分享的KMP算法还存在瑕疵。考虑这样一种情况，在 π 数组已经计算好的前提下，当p[i]!=s[j]，需要将 i 移至 π[i]，令 k=π[i]，若 p[k]==p[i]，那么再比较p[k]与s[j]是没有意义的，因此将这样的情况迭代优化后，就能得到 next 数组，满足：</p><div class="language-c" data-ext="c"><pre class="language-c"><code>            <span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> then next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
            <span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> then next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k
</code></pre></div><p>伪代码如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//计算next
compute_next<span class="token punctuation">(</span>p,next<span class="token punctuation">)</span>
	next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>
	<span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span>
	<span class="token assign-left variable">m</span><span class="token operator">=</span>p.length
	<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span> to 
		<span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
			next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
			<span class="token assign-left variable">k</span><span class="token operator">=</span>k+1
		<span class="token keyword">else</span>
			next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>k
			<span class="token keyword">while</span> k<span class="token operator">&gt;</span><span class="token number">0</span>
				<span class="token assign-left variable">k</span><span class="token operator">=</span>next<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
				if<span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
					<span class="token assign-left variable">k</span><span class="token operator">=</span>k+1
					goto out
			<span class="token operator">&lt;</span>out<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析以上伪代码后不难得知该算法的算法复杂度是O(m+n)，以下是C语言实现的KMP算法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">compute_next</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token operator">++</span>k<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">delta</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">kmp_search</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> <span class="token function">delta</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i <span class="token operator">==</span> m <span class="token operator">?</span> j <span class="token operator">-</span> m <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>delta函数可以合并到kmp_search函数进行简化，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">compute_next</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">kmp_search</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">++</span>i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i <span class="token operator">==</span> m <span class="token operator">?</span> j <span class="token operator">-</span> m <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> testStrings<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token string">&quot;tencent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;encentencentabcskf&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//true</span>
        <span class="token punctuation">{</span><span class="token string">&quot;alibaba&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ajsdkalibalibabisk&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//false</span>
        <span class="token punctuation">{</span><span class="token string">&quot;baidu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baibai.www.baidu.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//true</span>
        <span class="token punctuation">{</span><span class="token string">&quot;bytedance&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ajbytedadanceaaa&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//false</span>
        <span class="token punctuation">{</span><span class="token string">&quot;google&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;googoelglegooglegooo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//true</span>
        <span class="token punctuation">{</span><span class="token string">&quot;microsoft&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;microsofmicrosofp&quot;</span><span class="token punctuation">}</span>       <span class="token comment">//false</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>testStrings<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>testStrings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> testStrings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> testStrings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> next<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">compute_next</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> m<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">kmp_search</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;模式串&#39;%s&#39;移 %d 位匹配&#39;%s&#39;成功\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;模式串&#39;%s&#39;与&#39;%s&#39;匹配失败\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","KMPsuanfadeshuxueyuanli.html.vue"]]);export{k as default};
