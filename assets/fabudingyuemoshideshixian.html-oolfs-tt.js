import{_ as s,o as a,c as e,e as t,a as n}from"./app-rM-3rrR9.js";const p={},c=t(`<h2 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式" aria-hidden="true">#</a> 发布订阅模式</h2><blockquote><p>发布订阅模式，又称观察者模式，它定义了一种一对多的关系，让多个观察者对象 同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自身的状态。</p></blockquote><h2 id="关于prism" tabindex="-1"><a class="header-anchor" href="#关于prism" aria-hidden="true">#</a> 关于Prism</h2><blockquote><p>Prism 框架是一个微软团队实现的用于构建 WPF 桌面应用的框架，它提供了许多功能，包括模块化、导航、依赖注入、事件处理、命令、依赖关系、样式、主题、国际化、行为、样式、资源、控件、视图模型的支持。</p></blockquote><h3 id="eventaggregator" tabindex="-1"><a class="header-anchor" href="#eventaggregator" aria-hidden="true">#</a> EventAggregator</h3><p>Prism 框架中，事件处理的核心类是 <code>EventAggregator</code>，它实现了 <code>IEventAggregator</code> 接口，该接口定义了一个方法来获取指定的事件：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEventAggregator</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">TEventType</span> <span class="token generic-method"><span class="token function">GetEvent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TEventType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">TEventType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventBase</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="订阅事件" tabindex="-1"><a class="header-anchor" href="#订阅事件" aria-hidden="true">#</a> 订阅事件</h3><p>PubSubEvent 类实现了事件的发布和订阅，包含普通类型和泛型类型，它继承自 EventBase ，它的订阅过程如下 ：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">SubscriptionToken</span> <span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>TPayload<span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name">ThreadOption</span> threadOption<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> keepSubscriberReferenceAlive<span class="token punctuation">,</span> <span class="token class-name">Predicate<span class="token punctuation">&lt;</span>TPayload<span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//事件处理器的引用</span>
    <span class="token class-name">IDelegateReference</span> actionReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DelegateReference</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> keepSubscriberReferenceAlive<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//事件过滤器的引用</span>
    <span class="token class-name">IDelegateReference</span> filterReference<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>filter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        filterReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DelegateReference</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> keepSubscriberReferenceAlive<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        filterReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DelegateReference</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Predicate<span class="token punctuation">&lt;</span>TPayload<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">delegate</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">EventSubscription<span class="token punctuation">&lt;</span>TPayload<span class="token punctuation">&gt;</span></span> subscription<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>threadOption<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//使用推送事件的线程执行</span>
        <span class="token keyword">case</span> ThreadOption<span class="token punctuation">.</span>PublisherThread<span class="token punctuation">:</span>
            subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventSubscription<span class="token punctuation">&lt;</span>TPayload<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>actionReference<span class="token punctuation">,</span> filterReference<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">//使用线程池的线程执行</span>
        <span class="token keyword">case</span> ThreadOption<span class="token punctuation">.</span>BackgroundThread<span class="token punctuation">:</span>
            subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BackgroundEventSubscription<span class="token punctuation">&lt;</span>TPayload<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>actionReference<span class="token punctuation">,</span> filterReference<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token comment">//使用UI线程执行</span>
        <span class="token keyword">case</span> ThreadOption<span class="token punctuation">.</span>UIThread<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>SynchronizationContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span>Resources<span class="token punctuation">.</span>EventAggregatorNotConstructedOnUIThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
            subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DispatcherEventSubscription<span class="token punctuation">&lt;</span>TPayload<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>actionReference<span class="token punctuation">,</span> filterReference<span class="token punctuation">,</span> SynchronizationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventSubscription<span class="token punctuation">&lt;</span>TPayload<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>actionReference<span class="token punctuation">,</span> filterReference<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">InternalSubscribe</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//通过基类的 EventBase.InternalSubscribe 函数将事件添加到订阅者列表</span>
<span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">SubscriptionToken</span> <span class="token function">InternalSubscribe</span><span class="token punctuation">(</span><span class="token class-name">IEventSubscription</span> eventSubscription<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventSubscription <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>eventSubscription<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    eventSubscription<span class="token punctuation">.</span>SubscriptionToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubscriptionToken</span><span class="token punctuation">(</span>Unsubscribe<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">lock</span> <span class="token punctuation">(</span>Subscriptions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//将订阅者添加到事件的订阅列表</span>
        Subscriptions<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>eventSubscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> eventSubscription<span class="token punctuation">.</span>SubscriptionToken<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上的源码可知，事件处理器订阅一个事件时，会先构造一个事件处理器的引用，然后根据线程选项，构造一个事件订阅者，最后将事件订阅者添加到事件处理器中。</p><h3 id="delegatereference" tabindex="-1"><a class="header-anchor" href="#delegatereference" aria-hidden="true">#</a> DelegateReference</h3><p>DelegateReference 是一个委托的引用，它包含了委托的类型，以及委托的实例。这里为什么要使用DelegateReference，而不是直接使用Action呢，我们先来看一下它的源码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegateReference</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDelegateReference</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Delegate</span> _delegate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">WeakReference</span> _weakReference<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">MethodInfo</span> _method<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Type</span> _delegateType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">DelegateReference</span><span class="token punctuation">(</span><span class="token class-name">Delegate</span> @<span class="token keyword">delegate</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> keepReferenceAlive<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token keyword">delegate</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">&quot;delegate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>keepReferenceAlive<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_delegate <span class="token operator">=</span> @<span class="token keyword">delegate</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//若keepReferenceAlive为false，则使用弱引用，并保存委托的元数据</span>
            _weakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WeakReference</span><span class="token punctuation">(</span>@<span class="token keyword">delegate</span><span class="token punctuation">.</span>Target<span class="token punctuation">)</span><span class="token punctuation">;</span>
            _method <span class="token operator">=</span> @<span class="token keyword">delegate</span><span class="token punctuation">.</span><span class="token function">GetMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _delegateType <span class="token operator">=</span> @<span class="token keyword">delegate</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Delegate</span> Target
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_delegate <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> _delegate<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//弱引用时，使用元数据通过反射来创建一个委托</span>
                <span class="token keyword">return</span> <span class="token function">TryGetDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TargetEquals</span><span class="token punctuation">(</span><span class="token class-name">Delegate</span> @<span class="token keyword">delegate</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name">Delegate</span> <span class="token function">TryGetDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_method<span class="token punctuation">.</span>IsStatic<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> _method<span class="token punctuation">.</span><span class="token function">CreateDelegate</span><span class="token punctuation">(</span>_delegateType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token keyword">object</span></span> target <span class="token operator">=</span> _weakReference<span class="token punctuation">.</span>Target<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> _method<span class="token punctuation">.</span><span class="token function">CreateDelegate</span><span class="token punctuation">(</span>_delegateType<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就涉及到对象的强引用和弱引用。如果使用强引用来存储对订阅者的引用，即使订阅者已经不再被需要，也会阻止垃圾回收器回收它，从而导致内存泄漏。使用 WeakReference 可以确保订阅者的对象在不再被需要时可以被垃圾回收期回收，避免内存泄漏。</p><h3 id="发布事件" tabindex="-1"><a class="header-anchor" href="#发布事件" aria-hidden="true">#</a> 发布事件</h3><p>理解了上面的事件订阅，再来看事件发布就比较容易了，上源码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Publish</span><span class="token punctuation">(</span><span class="token class-name">TPayload</span> payload<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">InternalPublish</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InternalPublish</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arguments<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> executionStrategies <span class="token operator">=</span> <span class="token function">PruneAndReturnStrategies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> executionStrategy <span class="token keyword">in</span> executionStrategies<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">executionStrategy</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">PruneAndReturnStrategies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> returnList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">lock</span> <span class="token punctuation">(</span>Subscriptions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> Subscriptions<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> listItem <span class="token operator">=</span>
                _subscriptions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetExecutionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>listItem <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _subscriptions<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                returnList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>listItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> returnList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，发布事件时，会先从订阅者列表中获取策略，如果没有则移除掉失效的订阅者，将有效的订阅者返回后，遍历列表逐个执行委托。</p><h3 id="事件聚合器" tabindex="-1"><a class="header-anchor" href="#事件聚合器" aria-hidden="true">#</a> 事件聚合器</h3><p>回到 EventAggregator ,上源码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//事件字典</span>
<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> EventBase<span class="token punctuation">&gt;</span></span> events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> EventBase<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//提供在各种同步模型中传播同步上下文的基本功能，这里主要用作传播主线程同步上下文</span>
<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SynchronizationContext</span> syncContext <span class="token operator">=</span> SynchronizationContext<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name">TEventType</span> <span class="token generic-method"><span class="token function">GetEvent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TEventType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">TEventType</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventBase</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">lock</span> <span class="token punctuation">(</span>events<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">EventBase</span> existingEvent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>events<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TEventType</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> existingEvent<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">TEventType</span> newEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newEvent<span class="token punctuation">.</span>SynchronizationContext <span class="token operator">=</span> syncContext<span class="token punctuation">;</span>
            events<span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TEventType</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> newEvent<span class="token punctuation">;</span>

            <span class="token keyword">return</span> newEvent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>TEventType<span class="token punctuation">)</span>existingEvent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察以上代码可知，事件聚合器内部维护了一个事件字典，字典的键为事件类型，值是事件对象。当获取事件时，先从字典中获取，如果没有则创建一个事件对象，并添加到字典中，最后返回这个事件对象，通过互斥锁来保证线程安全。</p>`,23),o=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"本文到此结束，你学废了吗。。。")],-1),l=[c,o];function i(u,k){return a(),e("div",null,l)}const d=s(p,[["render",i],["__file","fabudingyuemoshideshixian.html.vue"]]);export{d as default};
